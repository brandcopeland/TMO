import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import (
    accuracy_score, confusion_matrix, 
    roc_curve, auc, precision_recall_curve,
    RocCurveDisplay
)
from sklearn.preprocessing import label_binarize
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.datasets import load_iris, load_breast_cancer
from sklearn.multiclass import OneVsRestClassifier

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="ML Model Explorer",
    page_icon="üß†",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üß† –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
st.write("""
–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.
–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –¥–∞–Ω–Ω—ã—Ö.
""")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞")
    dataset_type = st.radio("–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:", 
                           ["–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV"])
    
    # –í—ã–±–æ—Ä –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    if dataset_type == "–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ":
        dataset_name = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö:",
            ["–ò—Ä–∏—Å—ã –§–∏—à–µ—Ä–∞", "–†–∞–∫ –º–æ–ª–æ—á–Ω–æ–π –∂–µ–ª–µ–∑—ã"]
        )
    else:
        data_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª", type="csv")
    
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    model_name = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
        ["–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è", "–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å", 
         "–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –±—É—Å—Ç–∏–Ω–≥", "SVM"]
    )
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
    st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏:")
    test_size = st.slider("–î–æ–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", 0.1, 0.5, 0.2)
    random_state = st.number_input("Random State:", 0, 100, 42)

    # –ö–Ω–æ–ø–∫–∞ –æ–±—É—á–µ–Ω–∏—è
    train_button = st.button("–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å")

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
if dataset_type == "–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ":
    if dataset_name == "–ò—Ä–∏—Å—ã –§–∏—à–µ—Ä–∞":
        data = load_iris()
        is_multiclass = True
    else:
        data = load_breast_cancer()
        is_multiclass = False
    X = pd.DataFrame(data.data, columns=data.feature_names)
    y = pd.Series(data.target, name='target')
    class_names = data.target_names if hasattr(data, 'target_names') else None
else:
    if data_file is not None:
        data = pd.read_csv(data_file)
        X = data.iloc[:, :-1]
        y = data.iloc[:, -1]
        is_multiclass = len(y.unique()) > 2
        class_names = None
    else:
        st.info("‚è≥ –û–∂–∏–¥–∞—é –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
        st.stop()

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
st.header("üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
st.subheader("–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö:")
st.write(X.head())

st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
st.write(X.describe())

# –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
models = {
    "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è": LogisticRegression(max_iter=10000),
    "–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å": RandomForestClassifier(n_estimators=100),
    "–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –±—É—Å—Ç–∏–Ω–≥": GradientBoostingClassifier(),
    "SVM": SVC(probability=True)
}

if train_button:
    st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è")
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=test_size, random_state=random_state
    )
    
    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    model = models[model_name]
    with st.spinner(f"–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ {model_name}..."):
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        y_proba = model.predict_proba(X_test) if hasattr(model, "predict_proba") else None
    
    # –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
    accuracy = accuracy_score(y_test, y_pred)
    st.success(f"–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: **{accuracy:.4f}**")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫")
        cm = confusion_matrix(y_test, y_pred)
        fig, ax = plt.subplots(figsize=(8, 6))
        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', ax=ax)
        
        if class_names is not None:
            ax.set_xticklabels(class_names)
            ax.set_yticklabels(class_names)
            
        ax.set_xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å')
        ax.set_ylabel('–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å')
        st.pyplot(fig)
    
    with col2:
        if y_proba is not None:
            st.subheader("ROC-–∫—Ä–∏–≤–∞—è")
            fig, ax = plt.subplots(figsize=(8, 6))
            
            if is_multiclass:
                # –ú–Ω–æ–≥–æ–∫–ª–∞—Å—Å–æ–≤–∞—è ROC-–∫—Ä–∏–≤–∞—è
                y_test_bin = label_binarize(y_test, classes=np.unique(y))
                n_classes = y_test_bin.shape[1]
                
                for i in range(n_classes):
                    fpr, tpr, _ = roc_curve(y_test_bin[:, i], y_proba[:, i])
                    roc_auc = auc(fpr, tpr)
                    ax.plot(fpr, tpr, lw=2,
                            label=f'–ö–ª–∞—Å—Å {i} (AUC = {roc_auc:.2f})')
                
                ax.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
                ax.set_xlim([0.0, 1.0])
                ax.set_ylim([0.0, 1.05])
                ax.set_xlabel('False Positive Rate')
                ax.set_ylabel('True Positive Rate')
                ax.legend(loc="lower right")
                ax.set_title('–ú–Ω–æ–≥–æ–∫–ª–∞—Å—Å–æ–≤–∞—è ROC-–∫—Ä–∏–≤–∞—è')
            else:
                # –ë–∏–Ω–∞—Ä–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
                fpr, tpr, _ = roc_curve(y_test, y_proba[:, 1])
                roc_auc = auc(fpr, tpr)
                ax.plot(fpr, tpr, color='darkorange', lw=2,
                        label=f'ROC –∫—Ä–∏–≤–∞—è (AUC = {roc_auc:.2f})')
                ax.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
                ax.set_xlim([0.0, 1.0])
                ax.set_ylim([0.0, 1.05])
                ax.set_xlabel('False Positive Rate')
                ax.set_ylabel('True Positive Rate')
                ax.legend(loc="lower right")
                ax.set_title('ROC-–∫—Ä–∏–≤–∞—è')
            
            st.pyplot(fig)
        else:
            st.warning("ROC-–∫—Ä–∏–≤–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –º–æ–¥–µ–ª—å –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏")
    
    # –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    if hasattr(model, 'feature_importances_'):
        st.subheader("–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        importances = pd.Series(
            model.feature_importances_, 
            index=X.columns
        ).sort_values(ascending=False)
        
        fig, ax = plt.subplots(figsize=(10, 6))
        importances.plot.bar(ax=ax)
        ax.set_title("–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        ax.set_ylabel("–í–∞–∂–Ω–æ—Å—Ç—å")
        plt.xticks(rotation=45, ha='right')
        st.pyplot(fig)

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
st.sidebar.header("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
st.sidebar.info("""
1. –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ
2. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
4. –ù–∞–∂–º–∏—Ç–µ "–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"
5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
""")